package com.fomp.note.springcloud;

/**
 * SpringCloud是基于SpringBoot基础之上开发的微服务框架，
 * SpringCloud是一套目前非常完整的微服务解决方案框架，
 * 其内容包含服务治理、注册中心、配置管理、断路器、智能路由、微代理、控制总线、全局锁、分布式会话等。
 */
public class SpringCloudTest {
}
class EurekaTest {
    /**
     * 什么是服务治理：
     *      在传统rpc远程调用中，服务与服务依赖关系，管理比较复杂，所以需要使用服务治理，
     *      管理服务与服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。
     * 服务注册与发现
     *      在服务注册与发现中，有一个注册中心，当服务器启动的时候，会把当前自己服务器的信息
     *          比如 服务地址通讯地址等以别名方式注册到注册中心上。
     *      另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，
     *          让后在实现本地rpc调用远程。
     */
    /**
     * Eureka高可用原理
     * 默认情况下Eureka是让服务注册中心，不注册自己
     * ###因为该应用为注册中心，不会注册自己
     *     register-with-eureka: true
     * ###不需要去注册中心上检索服务
     *     fetch-registry: true
     * Eureka高可用实际上将自己作为服务向其他服务注册中心注册自己，这样就可以形成一组相互注册的服务注册中心，从而实现服务清单的互相同步，达到高可用效果。
     */
    /**
     * Zookeeper与Eureka区别
     *
     * CPA理论:一个分布式系统不能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性在是分布式系统中必须要保证的，
     * 因此我们只能在A和C之间进行权衡。在此Zookeeper保证的是CP, 而Eureka则是AP。
     *
     * Consistency(一致性), 数据一致更新，所有数据变动都是同步的
     * Availability(可用性), 好的响应性能
     * Partition tolerance(分区容忍性) 可靠性
     */
    /**
     * Zookeeper是保证CP
     *      当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。
     *      也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，
     *      剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。
     *      在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。
     * Eureka是保证AP
     *      Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，
     *      剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，
     *      只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，
     *      如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：
     *      1. Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务
     *      2. Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)
     *      3. 当网络稳定时，当前实例新的注册信息会被同步到其它节点中
     *      因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。
     */
    /**
     * Consul,Zookeeper，Eureka都可以实现服务治理
     */
}
class RibbonAndNginx{
    /**
     * Nginx：服务器端负载均衡
     *  nginx是客户端所有请求统一交给nginx，由nginx进行实现负载均衡请求转发，属于服务器端负载均衡。
     *  既请求有nginx服务器端进行转发。
     * Ribbon：客户端负载均衡
     *  Ribbon是从eureka注册中心服务器端上获取服务注册信息列表，缓存到本地，然后在本地实现轮训负载均衡策略。
     *  既在客户端实现负载均衡。
     * 应用场景的区别：
     *  Nginx适合于服务器端实现负载均衡比如Tomcat ，
     *  Ribbon适合与在微服务中RPC远程调用实现本地服务负载均衡，
     *   比如Dubbo、SpringCloud中都是采用本地负载均衡。(Feign,zuul)
     */
}